import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useTranslation } from 'react-i18next';
import { FiBook, FiHeadphones } from 'react-icons/fi';
import { supabase } from '../services/supabase';

const SidebarContainer = styled.div`
  width: 100%;
  max-width: 280px;
  padding: ${({ theme }) => theme.spacing.md};
  background-color: ${({ theme }) => theme.colors.card};
  border-radius: ${({ theme }) => theme.borderRadius.lg};
  border: 1px solid ${({ theme }) => theme.colors.border};
  box-shadow: ${({ theme }) => theme.shadows.sm};
  
  @media (max-width: 768px) {
    max-width: 100%;
  }
`;

const SidebarHeader = styled.h3`
  margin: 0 0 ${({ theme }) => theme.spacing.md} 0;
  font-size: ${({ theme }) => theme.typography.fontSize.lg};
  color: ${({ theme }) => theme.colors.text};
  font-weight: ${({ theme }) => theme.typography.fontWeight.semibold};
  padding-bottom: ${({ theme }) => theme.spacing.sm};
  border-bottom: 1px solid ${({ theme }) => theme.colors.border};
`;

const TagList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-bottom: 0.7rem;
`;

const CategoryHeader = styled.div`
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  border: 1px solid ${({ theme }) => theme.colors.primary};
  border-radius: 8px 8px 0 0;
  padding: 12px 16px;
  margin: 16px 0 0 0;
  font-weight: 600;
  font-size: 1.1em;
  display: flex;
  align-items: center;
  
  svg {
    margin-right: 10px;
  }
`;

const SubcategoryHeader = styled.div`
  background-color: #f0f0f0;
  color: ${({ theme }) => theme.colors.textDark || '#333'};
  padding: 10px 10px 10px 16px;
  margin: 0;
  font-weight: 500;
  font-size: 1em;
  border-bottom: 1px solid #ddd;
`;

const CategoryItem = styled.label`
  display: flex;
  align-items: center;
  padding: 8px 8px 8px 24px;
  margin: 2px 0;
  cursor: pointer;
  font-size: 0.95em;
  color: ${({ theme }) => theme.colors.text};
  transition: background-color 0.2s;
  border-radius: 4px;
  
  &:hover {
    background-color: #f5f5f5;
  }
  
  input {
    margin-right: 10px;
    cursor: pointer;
  }
`;

const ClearAllButton = styled.button`
  margin-bottom: 1em;
  background: ${({ theme }) => theme.colors.background};
  color: ${({ theme }) => theme.colors.primary};
  border: 1px solid ${({ theme }) => theme.colors.primary};
  border-radius: 8px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
  width: 100%;
  transition: all 0.2s;
  
  &:hover {
    background: ${({ theme }) => theme.colors.primary};
    color: white;
  }
`;

const CategoryGroup = styled.div`
  border: 1px solid #ddd;
  border-top: none;
  border-radius: 0 0 8px 8px;
  overflow: hidden;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
`;

const CategoryTagsContainer = styled.div`
  padding: 10px;
  background-color: white;
`;

// --- UTILS: Category cleaning and splitting (matches what's stored in Supabase) ---

// Helper function to extract categories from genre string
export function extractCategoryParts(raw: string): string[] {
  if (!raw) return [];
  
  // Blacklist of terms to filter out
  const blacklist = [
    'kindle ebooks', 'kindle e-books', 'ebooks', 'kindle', 
    'fiction', 'non-fiction', 'nonfiction', 'non fiction'
  ];
  
  // Process the genre string to extract categories
  return raw
    .split(/>|&|,/) // Split only by hierarchy markers, not spaces
    .map(p => p.trim())
    .filter(Boolean)
    .map(p => p.replace(/\(\d+\)$/g, '').trim().toLowerCase())
    .filter(p => p && p.length > 1 && !blacklist.includes(p));
}

function translateCategory(cat: string, t: (k: string) => string) {
  const key = `categories.${cat}`;
  const translated = t(key);
  return translated !== key ? translated : cat.replace(/\b\w/g, c => c.toUpperCase());
}

// --- MAIN SIDEBAR COMPONENT ---
interface CategorySidebarProps {
  selectedCategories: string[];
  setSelectedCategories: (cats: string[]) => void;
}

export const CategorySidebar: React.FC<CategorySidebarProps> = ({ 
  selectedCategories, 
  setSelectedCategories 
}) => {
  const { t } = useTranslation();
  const [categories, setCategories] = useState<Record<string, Record<string, Record<string, number>>>>({});
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchCategories = async () => {
      setLoading(true);
      try {
        // Show debugging information about the database structure
        console.log('DEBUG: Fetching books to analyze categories structure...');
        const { data } = await supabase
          .from('books')
          .select('id, type, fictionType, genre, categories');
        
        // Debug what we got from the database
        if (data && Array.isArray(data) && data.length > 0) {
          console.log('DEBUG: Sample book data structure:', {
            id: data[0].id,
            type: data[0].type,
            genre: data[0].genre,
            categories: data[0].categories,
            fictionType: data[0].fictionType
          });
          
          // Log all unique categories found in the database
          const allCategories = new Set();
          // Make sure data is an array before using forEach
          const booksArray = Array.isArray(data) ? data : [];
          booksArray.forEach(book => {
            if (book.categories && Array.isArray(book.categories) && book.categories.length > 0) {
              book.categories.forEach((cat: string) => allCategories.add(cat));
            } else if (typeof book.genre === 'string' && book.genre) {
              // If categories array is empty, try to extract from genre string
              extractCategoryParts(book.genre).forEach(cat => allCategories.add(cat));
            }
          });
          console.log('DEBUG: All unique categories found:', Array.from(allCategories));
        }
        
        // Build a categorized structure for easy rendering 
        // Top level: Book type (E-Books, Audiobooks)
        // Second level: Fiction type (Fiction, Non-Fiction)
        // Third level: Category with count
        const categorized: Record<string, Record<string, Record<string, number>>> = {
          'E-Books': { 'Fiction': {}, 'Non-Fiction': {} },
          'Audiobooks': { 'Fiction': {}, 'Non-Fiction': {} }
        };
        
        if (data && Array.isArray(data)) {
          data.forEach(book => {
            // Determine book type category
            const bookType = book.type === 'ebook' ? 'E-Books' : 'Audiobooks';
            
            // Determine fiction type - default to Non-Fiction if not specified
            // (this ensures that even books without fictionType still appear in the sidebar)
            const fictionType = book.fictionType === 'Fiction' ? 'Fiction' : 'Non-Fiction';
            
            // If book has categories array, use that
            let cats: string[] = [];
            if (book.categories && Array.isArray(book.categories)) {
              cats = book.categories;
            } 
            // Otherwise try to extract from genre field
            else if (typeof book.genre === 'string' && book.genre) {
              cats = extractCategoryParts(book.genre);
            }
            
            // Add each category with count
            cats.forEach(cat => {
              if (!categorized[bookType][fictionType][cat]) {
                categorized[bookType][fictionType][cat] = 0;
              }
              categorized[bookType][fictionType][cat]++;
            });
          });
        }
        
        setCategories(categorized);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching categories:', error);
        setLoading(false);
      }
    };
    
    fetchCategories();
  }, [t]);

  // --- RENDER ---
  if (loading) {
    return (
      <SidebarContainer>
        <SidebarHeader>{t('sidebar.categories', 'Categories')}</SidebarHeader>
        <div>{t('common.loading', 'Loading...')}</div>
      </SidebarContainer>
    );
  }

  return (
    <SidebarContainer>
      <SidebarHeader>{t('sidebar.categories', 'Categories')}</SidebarHeader>
      
      {selectedCategories.length > 0 && (
        <ClearAllButton onClick={() => setSelectedCategories([])}>
          Clear All
        </ClearAllButton>
      )}

      {/* E-Books main section */}
      <CategoryHeader>
        <FiBook /> 
        {typeof t('categories.ebooks') === 'string' && t('categories.ebooks') !== 'categories.ebooks' ? t('categories.ebooks') : 'E-Books'}
      </CategoryHeader>
      
      <CategoryGroup>
        {/* Subcategory: Fiction for E-Books */}
        <SubcategoryHeader>
          {typeof t('categories.fiction') === 'string' && t('categories.fiction') !== 'categories.fiction' ? t('categories.fiction') : 'Fiction'}
        </SubcategoryHeader>

        {/* Fiction tags for E-Books */}
        <CategoryTagsContainer>
          <TagList>
            {categories['E-Books']?.['Fiction'] && Object.entries(categories['E-Books']['Fiction']).map(([cat, count]) => {
              const isSelected = selectedCategories.includes(cat);
              const translatedCategory = translateCategory(cat, t);
              
              return (
                <CategoryItem key={cat}>
                  <input 
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => {
                      if (isSelected) {
                        setSelectedCategories(selectedCategories.filter(c => c !== cat));
                      } else {
                        // Add to current selection rather than replacing
                        setSelectedCategories([...selectedCategories, cat]);
                      }
                    }}
                  />
                  {translatedCategory} ({count})
                </CategoryItem>
              );
            })}
          </TagList>
        </CategoryTagsContainer>

        {/* Subcategory: Non-Fiction for E-Books */}
        <SubcategoryHeader>
          {typeof t('categories.nonFiction') === 'string' && t('categories.nonFiction') !== 'categories.nonFiction' ? t('categories.nonFiction') : 'Non-Fiction'}
        </SubcategoryHeader>

        {/* Non-Fiction tags for E-Books */}
        <CategoryTagsContainer>
          <TagList>
            {categories['E-Books']?.['Non-Fiction'] && Object.entries(categories['E-Books']['Non-Fiction']).map(([cat, count]) => {
              const isSelected = selectedCategories.includes(cat);
              const translatedCategory = translateCategory(cat, t);
              
              return (
                <CategoryItem key={cat}>
                  <input 
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => {
                      if (isSelected) {
                        setSelectedCategories(selectedCategories.filter(c => c !== cat));
                      } else {
                        // Add to current selection rather than replacing
                        setSelectedCategories([...selectedCategories, cat]);
                      }
                    }}
                  />
                  {translatedCategory} ({count})
                </CategoryItem>
              );
            })}
          </TagList>
        </CategoryTagsContainer>
      </CategoryGroup>

      {/* Audiobooks main section */}
      <CategoryHeader>
        <FiHeadphones /> 
        {typeof t('categories.audiobooks') === 'string' && t('categories.audiobooks') !== 'categories.audiobooks' ? t('categories.audiobooks') : 'Audiobooks'}
      </CategoryHeader>
      
      <CategoryGroup>
        {/* Subcategory: Fiction for Audiobooks */}
        <SubcategoryHeader>
          {typeof t('categories.fiction') === 'string' && t('categories.fiction') !== 'categories.fiction' ? t('categories.fiction') : 'Fiction'}
        </SubcategoryHeader>

        {/* Fiction tags for Audiobooks */}
        <CategoryTagsContainer>
          <TagList>
            {categories['Audiobooks']?.['Fiction'] && Object.entries(categories['Audiobooks']['Fiction']).map(([cat, count]) => {
              const isSelected = selectedCategories.includes(cat);
              const translatedCategory = translateCategory(cat, t);
              
              return (
                <CategoryItem key={cat}>
                  <input 
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => {
                      if (isSelected) {
                        setSelectedCategories(selectedCategories.filter(c => c !== cat));
                      } else {
                        // Add to current selection rather than replacing
                        setSelectedCategories([...selectedCategories, cat]);
                      }
                    }}
                  />
                  {translatedCategory} ({count})
                </CategoryItem>
              );
            })}
          </TagList>
        </CategoryTagsContainer>

        {/* Subcategory: Non-Fiction for Audiobooks */}
        <SubcategoryHeader>
          {typeof t('categories.nonFiction') === 'string' && t('categories.nonFiction') !== 'categories.nonFiction' ? t('categories.nonFiction') : 'Non-Fiction'}
        </SubcategoryHeader>

        {/* Non-Fiction tags for Audiobooks */}
        <CategoryTagsContainer>
          <TagList>
            {categories['Audiobooks']?.['Non-Fiction'] && Object.entries(categories['Audiobooks']['Non-Fiction']).map(([cat, count]) => {
              const isSelected = selectedCategories.includes(cat);
              const translatedCategory = translateCategory(cat, t);
              
              return (
                <CategoryItem key={cat}>
                  <input 
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => {
                      if (isSelected) {
                        setSelectedCategories(selectedCategories.filter(c => c !== cat));
                      } else {
                        // Add to current selection rather than replacing
                        setSelectedCategories([...selectedCategories, cat]);
                      }
                    }}
                  />
                  {translatedCategory} ({count})
                </CategoryItem>
              );
            })}
          </TagList>
        </CategoryTagsContainer>
      </CategoryGroup>
    </SidebarContainer>
  );
};
