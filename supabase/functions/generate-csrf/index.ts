import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { handleCors, corsHeaders } from '../_shared/cors.ts'; 
import { csrf } from 'csrf'; 

const CSRF_SECRET = Deno.env.get('CSRF_SECRET');

if (!CSRF_SECRET) {
  console.error('FATAL: CSRF_SECRET environment variable is not set!');
  // In a real scenario, you might want to prevent the function from starting
}

// Ensure CSRF_SECRET is treated as a string even if it's null initially
const csrfProtection = csrf({
  secret: CSRF_SECRET || 'fallback-secret-if-not-set', // Provide a fallback or handle error
  cookie: false, // We'll handle sending the token manually
  saltLength: 10, // Recommended salt length
  secretLength: 20 // Recommended secret length (can adjust)
});

serve(async (req: Request) => {
  // Use the handleCors function from the shared file
  const corsHeadersResponse = handleCors(req);

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    // Use the headers generated by handleCors
    return new Response('ok', { headers: corsHeadersResponse });
  }

  try {
    if (!CSRF_SECRET) {
      throw new Error('CSRF secret not configured on server.');
    }

    // Create a Supabase client with the Auth context of the user making the request.
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );

    // Check if the user is authenticated.
    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        // Use the headers generated by handleCors
        headers: { ...corsHeadersResponse, 'Content-Type': 'application/json' },
        status: 401,
      });
    }

    // Generate a CSRF token - include user ID for binding
    const token = await csrfProtection.create(CSRF_SECRET + user.id); 

    return new Response(JSON.stringify({ csrfToken: token }), {
      // Use the headers generated by handleCors
      headers: { ...corsHeadersResponse, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('Error generating CSRF token:', error);
    return new Response(JSON.stringify({ error: error.message || 'Failed to generate CSRF token' }), {
      // Use the headers generated by handleCors
      headers: { ...corsHeadersResponse, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});
